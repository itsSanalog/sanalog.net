---
import { getCollection } from "astro:content";
import BlogLayout from "../../../../layouts/BlogLayout.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  // Get all entries from the reviews collection, filter by directory
  const reviewEntries = await getCollection("reviews", ({ id }) => {
    return id.startsWith("music/");
  });
  return reviewEntries.map((entry) => ({
    // Remove the "[directory]/" prefix from the slug. slice() isn't used for clarity
    params: { slug: entry.slug.replace(/^(music\/)/,"") },
    props: { entry },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();

// JavaScript for date
const options = { year: 'numeric', month: 'long', day: 'numeric' };
let formattedDate = null;
if (entry.data.publicationDate) {
  formattedDate = entry.data.publicationDate.toLocaleDateString('en-US', options);
}

const releaseDateYear = new Date( entry.data.releaseDate ?? '').getFullYear();
---

<BlogLayout id={ entry.id } { ...entry.data }>
  <content>
    <div class="flex align-center ms2" style="position: relative; background-color: var(--color-bg-secondary); z-index: -2;">
      <img class="album-art mmr" src={ entry.data.imageLink } alt={ entry.data.imageAlt } />
      <div class="mmr">
        <h3 class="muted mb0">{ entry.data.artist } &centerdot; { releaseDateYear }</h3>
        <h1 style="margin-top: 0.1em;">{ entry.data.title }</h1>
        <p class="muted mt0">{ formattedDate }</p>
      </div>
      <div class="rating mmr">{ entry.data.rating ?? '' }</div> 
    </div>
    <!------------------------------->
    <Content />
  </content>
</BlogLayout>

<style>
  .album-art {
    width: 12em;
    height: auto;
    border-radius: 0;
  }

  .rating {
    position: absolute;
    margin-top: auto;
    right: 0;
    user-select: none;
    z-index: -1;
    
    color: var(--color-bg-primary);
    /* color : var(--color-ui-normal); */
    font-size: 18em; 
    font-weight: bold;
    font-family: var(--font-content);
    letter-spacing: -0.04em;
  }

  .point {
    font-weight: bold;
    padding: 0.25em 0 0;
  }

  .point.title {
    color: var(--color-bg-primary);
    background: var(--color-tx-normal);
    border: solid var(--color-tx-normal);
  }

  .point.number {
    border: solid var(--color-tx-normal);
  }
</style>