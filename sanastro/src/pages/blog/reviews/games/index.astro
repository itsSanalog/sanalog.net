---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import BlogLayout from "../../../../layouts/BlogLayout.astro";

const gameReviews = await getCollection("reviews", ({ id }) => {
  return id.startsWith("games/");
});
// For initial (default) sorting.
gameReviews.sort((a, b) => {
  return (b.data.rating ?? 0) - (a.data.rating ?? 0);
});
---

<BlogLayout title="Games">
  <content>
    <h1>games of the video variety</h1>
    <!-- <p class="muted"><em>this is super tacky and not good ui</em></p> -->
    <span class="muted">Sort by: </span>
    <select id="sortCriteria" class="mt ms1">
      <option value="rating">Rating</option>
      <option value="title">Title</option>
      <option value="devName">Developer name</option>
      <option value="releaseDate">Release date</option>
    </select>
    
    <div class="game-grid" id="reviewsContainer">
      { gameReviews.map((review) => { return(
        <a href={ `/blog/reviews/${ review.slug }` } class="cartridge plain"
        data-rating={ review.data.rating }
        data-title={ review.data.title }
        data-dev-name={ review.data.artist }
        data-release-date={ review.data.releaseDate }>
          <img src={ review.data.imageLink } alt={ review.data.imageAlt } class="game-image"/>
          <h1 class="game-score">{ review.data.rating }</h1>
          <h2 class="mt">{ review.data.title }</h2>
        </a>
      )}) }
    </div>
  </content>
</BlogLayout>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap');

  .game-grid {
    display: grid;
    grid-column-gap: 4em;
    grid-row-gap: 1.5em;
    grid-template-columns: 1fr 1fr 1fr;
  }

  .cartridge {
    background-image: url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg id='Layer_2' data-name='Layer 2' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 409 452'%3E%3Cdefs%3E%3Cstyle%3E .cls-1 %7B fill: %23909090; %7D .cls-1, .cls-2, .cls-3, .cls-4, .cls-5 %7B stroke-width: 0px; %7D .cls-2 %7B fill: %23666; %7D .cls-3 %7B fill: gray; %7D .cls-4 %7B fill: %23555; %7D .cls-5 %7B fill: %23777; %7D %3C/style%3E%3C/defs%3E%3Cg id='Layer_1-2' data-name='Layer 1'%3E%3Cpath class='cls-3' d='M403.26,0H5.74C2.57,0,0,2.05,0,4.59v356.82c0,2.53,2.57,4.59,5.74,4.59h17.26v81.41c0,2.54,2.57,4.59,5.73,4.59h352.53c3.17,0,5.73-2.06,5.73-4.59v-81.41h16.26c3.17,0,5.74-2.05,5.74-4.59V4.59c0-2.53-2.57-4.59-5.74-4.59Z'/%3E%3Crect class='cls-2' x='63' y='52' width='90' height='400'/%3E%3Cpath id='path20' class='cls-2' d='M222.61,334.03l-17.73,30.7-17.75-30.74,35.47.03Z'/%3E%3Crect id='rect28' class='cls-1' x='65' y='389' width='86' height='9'/%3E%3Crect id='rect30' class='cls-1' x='65' y='372' width='86' height='9'/%3E%3Crect id='rect32' class='cls-1' x='65' y='354' width='86' height='9'/%3E%3Crect id='rect34' class='cls-1' x='65' y='337' width='86' height='9'/%3E%3Crect id='rect36' class='cls-1' x='65' y='320' width='86' height='9'/%3E%3Crect id='rect38' class='cls-1' x='65' y='302' width='86' height='9'/%3E%3Crect id='rect40' class='cls-1' x='65' y='285' width='86' height='9'/%3E%3Crect id='rect42' class='cls-1' x='65' y='267' width='86' height='9'/%3E%3Crect id='rect44' class='cls-1' x='65' y='252' width='86' height='9'/%3E%3Crect id='rect46' class='cls-1' x='65' y='234' width='86' height='9'/%3E%3Crect id='rect48' class='cls-1' x='65' y='216' width='86' height='9'/%3E%3Crect id='rect50' class='cls-1' x='65' y='199' width='86' height='9'/%3E%3Crect id='rect52' class='cls-1' x='65' y='182' width='86' height='9'/%3E%3Crect id='rect54' class='cls-1' x='65' y='164' width='86' height='9'/%3E%3Crect id='rect56' class='cls-1' x='65' y='147' width='86' height='9'/%3E%3Crect id='rect58' class='cls-1' x='65' y='129' width='86' height='9'/%3E%3Crect class='cls-4' x='63' width='90' height='52'/%3E%3Crect id='rect60' class='cls-1' x='65' y='114' width='86' height='9'/%3E%3Crect id='rect62' class='cls-1' x='65' y='96' width='86' height='9'/%3E%3Crect id='rect64' class='cls-1' x='65' y='79' width='86' height='9'/%3E%3Crect id='rect66' class='cls-1' x='65' y='61' width='86' height='9'/%3E%3Crect id='rect68' class='cls-1' x='65' y='45' width='86' height='8'/%3E%3Crect id='rect70' class='cls-1' x='65' y='30' width='86' height='8'/%3E%3Crect id='rect72' class='cls-1' x='65' y='14' width='86' height='8'/%3E%3Crect id='rect74' class='cls-1' x='65' width='86' height='7'/%3E%3Cpath class='cls-1' d='M69,407h78c2.21,0,4,1.79,4,4v41h-86v-41c0-2.21,1.79-4,4-4Z'/%3E%3Crect class='cls-4' x='13' width='28' height='5'/%3E%3Crect class='cls-4' x='369' width='28' height='5'/%3E%3Cpath class='cls-5' d='M164,0h194v297c0,3.31-2.69,6-6,6h-182c-3.31,0-6-2.69-6-6V0h0Z'/%3E%3C/g%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-size: contain;
  }

  .game-image {
    position: relative;
    width: 47.5%;
    aspect-ratio: 194/303;
    left: 40%;
    border-radius: 0 0 0.1em 0.1em;
    filter: grayscale(5%) contrast(85%);
  }

  .game-score {
    position: relative;
    left: 20%;
    text-align: center;
    color: #17151f;
    text-shadow: black 0 0 1px;
    opacity: 0.9;
    rotate: -5deg;
    margin-top: 1.4rem;
    margin-bottom: 0.5em;
    font-family: "Kalam", cursive;
    font-weight: 400;
  }
</style>


<script>
  function sortReviews() {
    const sortCriteria = document.getElementById("sortCriteria").value;
    const reviewGrid = document.getElementById("reviewsContainer");
    const sortedReviews = Array.from(reviewGrid.children);
    
    sortedReviews.sort((a, b) => {
      let aVal, bVal;
      switch (sortCriteria) {
        // For case 'fooBar', `x.dataset.fooBar` in js means `data-foo-bar` in html.
        case 'rating':
          aVal = parseFloat(a.dataset.rating) || 0;
          bVal = parseFloat(b.dataset.rating) || 0;
          return bVal - aVal;
        case 'title':
          aVal = a.dataset.title || '';
          bVal = b.dataset.title || '';
          return aVal.localeCompare(bVal);
        case 'devName':
          aVal = a.dataset.devName || '';
          bVal = b.dataset.devName || '';
          return aVal.localeCompare(bVal);
        case 'releaseDate':
          aVal = new Date(a.dataset.releaseDate) || new Date(0);
          bVal = new Date(b.dataset.releaseDate) || new Date(0);
          return bVal - aVal;
      }
    });

    // Remove existing reviews
    reviewGrid.innerHTML = '';

    // Append sorted reviews
    sortedReviews.forEach(review => reviewGrid.appendChild(review));
  }

  document.getElementById('sortCriteria').addEventListener('change', sortReviews);
</script>