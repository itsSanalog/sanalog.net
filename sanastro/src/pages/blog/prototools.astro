---
import { getEntry } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
---

<!-- IMPORTANT: this file overwrites /blog/tools that would have been generated by [...slug].astro, or at least i think it does. -->

<BlogLayout title="Tools">
  <div class="desk-container" id="desk-container">
    <div class="zoom-controls">
      <button class="zoom-btn" id="zoom-in">+</button>
      <button class="zoom-btn" id="zoom-out">âˆ’</button>
    </div>
    <div class="item-info" id="item-info">
      <h4 id="item-title">Item Name</h4>
      <p id="item-description">Item description</p>
    </div>
    <div class="desk-surface" id="desk-surface">

    </div>
  </div>
</BlogLayout>



<style>
  .desk-container {
    width: 100%;
    height: 100%;
    position: relative;
    cursor: grab;
    overflow: hidden;
    background: var(--color-bg-primary);
  }

  .desk-container:active {
    cursor: grabbing;
  }

  .desk-surface {
    position: absolute;
    width: 2000px;
    height: 2000px;
    transform-origin: center center;
    transition: transform 0.1s ease-out;
  }

  .desk-item {
    position: absolute;
    cursor: pointer;
    transition: all 0.1s ease;
    /* filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3)); */
  }

  .desk-item:hover {
    transform: translateY(-5px) scale(1.05);
    filter: drop-shadow(4px 4px 8px rgba(0,0,0,0.5));
  }

  .desk-item svg {
    width: 100%;
    height: 100%;
  }

  .desk-item .wireframe {
    stroke:rgb(255, 0, 0);
    stroke-width: 2;
    fill: none;
    transition: stroke 0.2s ease;
  }

  .desk-item:hover .wireframe {
    stroke:rgb(255, 0, 0);
    stroke-width: 3;
  }

  .item-info {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 100;
    background: rgba(0,0,0,0.7);
    padding: 15px;
    border-radius: 10px;
    backdrop-filter: blur(10px);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .item-info.visible {
    opacity: 1;
  }

  .zoom-controls {
    position: absolute;
    top: 2rem;
    right: 2rem;
    z-index: 100;
    display: flex;
    flex-direction: column;
  }

  .zoom-btn {
    width: 4rem;
    height: 4rem;
    background: var(--color-ui-normal);
    border: none;
    border-radius: 50%;
    color: var(--color-action);
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.1s ease;
  }

  .zoom-btn:hover {
    background: var(--color-ui-hover);
    transform: scale(1.1);
  }
</style>



<script>
  const deskItems = [
    {
      id: 1,
      name: "cube",
      description: "cube",
      x: 200, y: 200, width: 120, height: 120,
      svg: `<svg viewBox="0 0 120 120">
        <g class="wireframe">
          <polygon points="20,40 60,20 100,40 100,80 60,100 20,80" />
          <polygon points="30,30 70,10 110,30 110,70 70,90 30,70" />
          <line x1="20" y1="40" x2="30" y2="30" />
          <line x1="60" y1="20" x2="70" y2="10" />
          <line x1="100" y1="40" x2="110" y2="30" />
          <line x1="100" y1="80" x2="110" y2="70" />
          <line x1="60" y1="100" x2="70" y2="90" />
          <line x1="20" y1="80" x2="30" y2="70" />
        </g>
      </svg>`
    },
    {
      id: 2,
      name: "pyramid",
      description: "pyramid",
      x: 400, y: 150, width: 100, height: 140,
      svg: `<svg viewBox="0 0 100 140">
        <g class="wireframe">
          <polygon points="15,100 50,85 85,100 85,120 50,135 15,120" />
          <line x1="15" y1="100" x2="50" y2="20" />
          <line x1="50" y1="85" x2="50" y2="20" />
          <line x1="85" y1="100" x2="50" y2="20" />
          <line x1="85" y1="120" x2="50" y2="20" />
          <line x1="50" y1="135" x2="50" y2="20" />
          <line x1="15" y1="120" x2="50" y2="20" />
        </g>
      </svg>`
    },
    {
      id: 3,
      name: "sphere",
      description: "sphere",
      x: 100, y: 400, width: 130, height: 130,
      svg: `<svg viewBox="0 0 130 130">
        <g class="wireframe">
          <circle cx="65" cy="65" r="50" />
          <ellipse cx="65" cy="65" rx="50" ry="20" />
          <ellipse cx="65" cy="65" rx="50" ry="35" />
          <ellipse cx="65" cy="65" rx="35" ry="50" />
          <ellipse cx="65" cy="65" rx="20" ry="50" />
          <line x1="65" y1="15" x2="65" y2="115" />
          <line x1="15" y1="65" x2="115" y2="65" />
        </g>
      </svg>`
    }
  ];

  class IsometricDesk {
    constructor() {
      this.container = document.getElementById('desk-container');
      this.surface = document.getElementById('desk-surface');
      this.itemInfo = document.getElementById('item-info');
      
      this.scale = 1;
      this.translateX = 0;
      this.translateY = 0;
      this.isDragging = false;
      this.lastMouseX = 0;
      this.lastMouseY = 0;
      
      this.init();
    }
      
    init() {
      this.createItems();
      this.bindEvents();
      this.centerView();
    }
      
    createItems() {
    deskItems.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'desk-item';
        itemElement.style.left = item.x + 'px';
        itemElement.style.top = item.y + 'px';
        itemElement.style.width = item.width + 'px';
        itemElement.style.height = item.height + 'px';
        itemElement.innerHTML = item.svg;
        itemElement.dataset.itemId = item.id;
        
        // Add hover events for item info
        itemElement.addEventListener('mouseenter', () => {
          document.getElementById('item-title').textContent = item.name;
          document.getElementById('item-description').textContent = item.description;
          this.itemInfo.classList.add('visible');
        });
        
        itemElement.addEventListener('mouseleave', () => {
          this.itemInfo.classList.remove('visible');
        });
        
        itemElement.addEventListener('click', () => {
          this.focusOnItem(item);
        });
        
        this.surface.appendChild(itemElement);
      });
    }
      
    bindEvents() {
      // Mouse events for panning
      this.container.addEventListener('mousedown', (e) => {
        this.isDragging = true;
        this.lastMouseX = e.clientX;
        this.lastMouseY = e.clientY;
      });
      
      document.addEventListener('mousemove', (e) => {
        if (this.isDragging) {
          const deltaX = e.clientX - this.lastMouseX;
          const deltaY = e.clientY - this.lastMouseY;
          
          this.translateX += deltaX;
          this.translateY += deltaY;
          
          this.updateTransform();
          
          this.lastMouseX = e.clientX;
          this.lastMouseY = e.clientY;
        }
      });
        
      document.addEventListener('mouseup', () => {
        this.isDragging = false;
      });
      
      // Scroll for zooming
      this.container.addEventListener('wheel', (e) => {
        e.preventDefault();
        const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
        this.zoom(zoomFactor);
      });
      
      // Zoom buttons
      document.getElementById('zoom-in').addEventListener('click', () => {
        this.zoom(1.2);
      });
      
      document.getElementById('zoom-out').addEventListener('click', () => {
        this.zoom(0.8);
      });
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        if (e.key === '=' || e.key === '+') {
          this.zoom(1.2);
        } else if (e.key === '-') {
          this.zoom(0.8);
        } else if (e.key === '0') {
          this.resetView();
        }
      });
    }
      
    zoom(factor) {
      const newScale = this.scale * factor;
      if (newScale >= 0.3 && newScale <= 3) {
        this.scale = newScale;
        this.updateTransform();
      }
    }
    
    updateTransform() {
      this.surface.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
    }
  
    centerView() {
      this.translateX = (window.innerWidth - 2000 * this.scale) / 2;
      this.translateY = (window.innerHeight - 2000 * this.scale) / 2;
      this.updateTransform();
    }
    
    resetView() {
      this.scale = 1;
      this.centerView();
    }
    
    focusOnItem(item) {
      const itemCenterX = item.x + item.width / 2;
      const itemCenterY = item.y + item.height / 2;
      
      this.translateX = window.innerWidth / 2 - itemCenterX * this.scale;
      this.translateY = window.innerHeight / 2 - itemCenterY * this.scale;
      
      this.updateTransform();
    }
  }
  
  window.addEventListener('load', () => {
    new IsometricDesk();
  });
</script>