---
import { getEntry } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
---

<!-- IMPORTANT: this file overwrites /blog/tools that would have been generated by [...slug].astro, or at least i think it does. -->

<BlogLayout title="Tools">
  <div class="desk-container" id="desk-container">
    <div class="zoom-controls">
      <button class="zoom-btn" id="zoom-in">+</button>
      <button class="zoom-btn" id="zoom-out">âˆ’</button>
    </div>
    <div class="item-info" id="item-info">
      <h4 id="item-title">name</h4>
      <p id="item-description">description</p>
    </div>
    <div class="desk-surface" id="desk-surface">
    </div>
  </div>
</BlogLayout>



<style>
  .desk-container {
    width: 100%;
    height: 90vh;
    position: relative;
    cursor: grab;
    overflow: hidden;
    
    /* background: rgb(226, 156, 197); */
  }

  .desk-container:active {
    cursor: grabbing;
  }

  .desk-surface {
    /* background-color: rgb(177, 221, 221); */

    position: absolute;
    width: 2400px;
    height: 1600px;
    /* transition: transform 0.1s ease; */
  }

  :global(.desk-item) { 
    position: absolute;
    cursor: pointer;
    transition: all 0.1s ease;
    stroke-width: 2;
    filter: brightness(0) saturate(100%) invert(90%) sepia(7%) saturate(227%) hue-rotate(17deg) brightness(92%) contrast(90%);
  }

  :global(.desk-item:hover) {
    /* Some options: 1. simple translateY and shadow 2. scale for emphasis 3. blur and stroke color+width for a glow effect */

    transform: translateY(-10px) scale(1.02);
    /* filter: drop-shadow(4px 4px 8px rgb(0, 0, 0)); */
    filter: brightness(0) saturate(100%) invert(74%) sepia(54%) saturate(5147%) hue-rotate(340deg) brightness(88%) contrast(93%);
    stroke-width: 120;
  }

  :global(.theme-light .desk-item) {
    filter: brightness(0) saturate(100%) invert(9%) sepia(4%) saturate(263%) hue-rotate(314deg) brightness(97%) contrast(106%);
  }

  :global(.theme-light .desk-item:hover) {
    filter: brightness(0) saturate(100%) invert(31%) sepia(81%) saturate(1239%) hue-rotate(356deg) brightness(94%) contrast(88%);
  }

  .item-info {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 100;
    background: var(--color-ui-normal);
    padding: 15px;
    border-radius: 10px;
    opacity: 0;
    transition: opacity 0.1s ease;
  }

  .item-info.visible {
    opacity: 1;
  }

  .zoom-controls {
    position: absolute;
    top: 2rem;
    right: 2rem;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 0.3em;
  }

  .zoom-btn {
    width: 4rem;
    height: 4rem;
    background: var(--color-ui-normal);
    border: none;
    border-radius: 50%;
    color: var(--color-tx-normal);
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.1s ease;
  }

  .zoom-btn:hover {
    background: var(--color-ui-hover);
    color: var(--color-action);
  }
</style>



<script>
  const deskItemsConfig = [
    {
      id: 1,
      name: "knife",
      description: "knife",
      x: 500, y: 510, width: 150, height: 120,
      svgFile: "knife.svg"
    },
    {
      id: 2,
      name: "phone",
      description: "phone",
      x: 280, y: 400, width: 250, height: 160,
      svgFile: "phone.svg"
    },
    {
      id: 3,
      name: "switch",
      description: "switch",
      x: 450, y: 180, width: 340, height: 300,
      svgFile: "switch.svg"
    }
  ];

  async function loadDeskItems() {
    const basePath = "/images/toolvectors/";
    const items = await Promise.all(
      deskItemsConfig.map(async (item) => {
        const res = await fetch(basePath + item.svgFile);
        const svg = await res.text();
        return { ...item, svg };
      })
    );
    return items;
  }

  class IsometricDesk {
    constructor(deskItems) {
      this.deskItems = deskItems;
      this.container = document.getElementById('desk-container');
      this.surface = document.getElementById('desk-surface');
      this.itemInfo = document.getElementById('item-info');

      this.scale = 1;
      this.translateX = 0;
      this.translateY = 0;
      this.isDragging = false;
      this.lastMouseX = 0;
      this.lastMouseY = 0;
      
      this.init();
    }
      
    init() {
      this.createItems();
      this.bindEvents();
      this.centerView();
    }
      
    createItems() {
      this.deskItems.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.classList.add('desk-item');
        itemElement.style.left = item.x + 'px';
        itemElement.style.top = item.y + 'px';
        itemElement.style.width = item.width + 'px';
        itemElement.style.height = item.height + 'px';
        itemElement.innerHTML = item.svg;
        itemElement.dataset.itemId = item.id;
      
        // const svg = itemElement.querySelector('svg');
        // if (svg) {
        //   svg.classList.add('gay');
        // }

        // Add hover events for item info
        itemElement.addEventListener('mouseenter', () => {
          document.getElementById('item-title').textContent = item.name;
          document.getElementById('item-description').textContent = item.description;
          this.itemInfo.classList.add('visible');
        });
        
        itemElement.addEventListener('mouseleave', () => {
          this.itemInfo.classList.remove('visible');
        });
        
        itemElement.addEventListener('click', () => {
          // this.focusOnItem(item); DEPRECATED
        });
        
        this.surface.appendChild(itemElement);
      });
    }
      
    bindEvents() {
      // Mouse events for panning
      this.container.addEventListener('mousedown', (e) => {
        this.isDragging = true;
        this.lastMouseX = e.clientX;
        this.lastMouseY = e.clientY;
      });
      
      document.addEventListener('mousemove', (e) => {
        if (this.isDragging) {
          const deltaX = e.clientX - this.lastMouseX;
          const deltaY = e.clientY - this.lastMouseY;
          
          this.translateX += deltaX;
          this.translateY += deltaY;
          
          this.updateTransform();
          
          this.lastMouseX = e.clientX;
          this.lastMouseY = e.clientY;
        }
      });
        
      document.addEventListener('mouseup', () => {
        this.isDragging = false;
      });
      
      // Scroll for zooming
      this.container.addEventListener('wheel', (e) => {
        e.preventDefault();
        const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
        this.zoom(zoomFactor);
      });
      
      // Zoom buttons
      document.getElementById('zoom-in').addEventListener('click', () => {
        this.zoom(1.2);
      });
      
      document.getElementById('zoom-out').addEventListener('click', () => {
        this.zoom(0.8);
      });
    }
      
    zoom(factor) {
      const newScale = this.scale * factor;
      if (newScale >= 0.5 && newScale <= 3) {
        this.scale = newScale;
        this.updateTransform();
      }
    }
    
    updateTransform() {
      this.surface.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.scale})`;
    }
  
    centerView() {
      const containerRect = this.container.getBoundingClientRect();
      this.translateX = (containerRect.width - 2400) / 2;
      this.translateY = (containerRect.height - 1600) / 2;
      this.updateTransform();
    }
    
    // Removed because it only works on 1x zoom and when you drag on items, it activates and causes a massive headache
    //
    // focusOnItem(item) {
    //   const itemCenterX = item.x + item.width / 2;
    //   const itemCenterY = item.y + item.height / 2;
    //
    //   this.translateX = window.innerWidth / 2 - itemCenterX * this.scale;
    //   this.translateY = window.innerHeight / 2 - itemCenterY * this.scale;
    //
    //   this.updateTransform();
    // }
  }
  
  window.addEventListener('load', async () => {
    const deskItems = await loadDeskItems();
    new IsometricDesk(deskItems);
  });
</script>