---
import { getEntry } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";

const sitemap = await getEntry("blog", "sitemap");
const { Content } = await sitemap.render();
---

<!-- IMPORTANT: this file overwrites /blog/sitemap that would have been generated by [...slug].astro, or at least i think it does. -->

<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11.4.1/+esm';
  
  mermaid.initialize({ 
    startOnLoad: true,
    theme: document.body.classList.contains("theme-light") ? "light" : "dark",
    flowchart: {
      curve: 'basis',
      diagramPadding: 8,
      htmlLabels: true,
      useMaxWidth: true,
    }
  });
  
  // Setup interaction after mermaid renders
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(setupInteractivity, 800);
  });
  
  function setupInteractivity() {
    const container = document.querySelector('.mermaid');
    const svg = container?.querySelector('svg');
    if (!svg) return;
    
    // Make SVG responsive
    svg.setAttribute('width', '100%');
    svg.setAttribute('height', '100%');
    
    // Setup pan/zoom state
    let scale = 1;
    let translateX = 0;
    let translateY = 0;
    let isDragging = false;
    let startX, startY;
    
    // Get the transform group
    const g = svg.querySelector('g');
    if (!g) return;
    
    // Update transform helper
    function updateTransform() {
      g.setAttribute('transform', `translate(${translateX}, ${translateY}) scale(${scale})`);
    }
    
    // Mouse events for dragging
    svg.addEventListener('mousedown', (e) => {
      if (e.button !== 0) return; // Only left mouse button
      isDragging = true;
      svg.classList.add('grabbing');
      startX = e.clientX;
      startY = e.clientY;
      e.preventDefault();
    });
    
    window.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      
      const dx = (e.clientX - startX) / scale;
      const dy = (e.clientY - startY) / scale;
      
      translateX += dx;
      translateY += dy;
      
      startX = e.clientX;
      startY = e.clientY;
      
      updateTransform();
    });
    
    window.addEventListener('mouseup', () => {
      isDragging = false;
      svg.classList.remove('grabbing');
    });
    
    // Wheel zoom
    svg.addEventListener('wheel', (e) => {
      e.preventDefault();
      const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
      
      // Get mouse position relative to SVG
      const svgRect = svg.getBoundingClientRect();
      const mouseX = e.clientX - svgRect.left;
      const mouseY = e.clientY - svgRect.top;
      
      // Calculate scaling around mouse position
      const oldScale = scale;
      scale *= zoomFactor;
      if (scale < 0.1) scale = 0.1;
      if (scale > 10) scale = 10;
      
      // Adjust translation to zoom toward mouse position
      const scaleFactor = scale / oldScale - 1;
      translateX -= mouseX * scaleFactor / oldScale;
      translateY -= mouseY * scaleFactor / oldScale;
      
      updateTransform();
    });
    
    // Double-click to reset view
    svg.addEventListener('dblclick', (e) => {
      if (e.target.closest('.node')) return; // Don't reset if clicking on a node
      
      scale = 1;
      translateX = 0;
      translateY = 0;
      updateTransform();
    });
    
    // Make nodes clickable - navigation to respective pages
    const nodes = svg.querySelectorAll('.node');
    nodes.forEach(node => {
      // Skip if this is a content count node (indicated by class)
      if (node.classList.contains('countNode')) return;
      
      node.style.cursor = 'pointer';
      node.addEventListener('click', () => {
        // Get the node ID and convert to URL path
        const nodeId = node.id;
        if (!nodeId) return;
        
        // Handle home node specially
        if (nodeId === 'home') {
          window.location.href = '/';
          return;
        }
        
        // Convert from mermaid node ID to path
        // e.g., blog_reviews_music -> /blog/reviews/music
        const path = '/' + nodeId.replace(/_/g, '/');
        window.location.href = path;
      });
    });
  }
  
  // Update diagram when theme changes
  const themeToggle = document.querySelector("#theme-toggle");
  if (themeToggle) {
    themeToggle.addEventListener("click", () => {
      setTimeout(() => {
        const isLightTheme = document.body.classList.contains('theme-light');
        mermaid.initialize({ 
          theme: isLightTheme ? 'light' : 'dark',
          startOnLoad: false 
        });
        mermaid.init(undefined, document.querySelectorAll(".mermaid:not([data-processed])"));
      }, 100);
    });
  }
</script>

<BlogLayout title="Sitemap">
  <content>
    <h1>Sitemap</h1>
    
    <p class="muted"><em>..mapping pages makes this more of an index</em></p>
    <p class="mmb">A sitemap of sanaBlog. Work in progress.</p>

    <Content />

  </content>
</BlogLayout>

<style>
  .mermaid svg {
    cursor: grab;
  }

  .mermaid svg.grabbing {
    cursor: grabbing;
  }

  .node:hover {
    opacity: 0.8;
  }
</style>